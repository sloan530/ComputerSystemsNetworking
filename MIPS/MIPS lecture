ma, go, bc, sip, pb, ro

move <direction> <# of steps>
go <object> # go is grab object
bc <distance> # bc is bring close distance amount
sip # take a sip
pb <distance> # pb is put back at distance
ro <object> # ro is release object

move left 5
go coffeecup
bc 3
sip
pb 3
ro coffeecup

RISC - Reduced Instruction Set Computing
- Simplified design for instruction
- Use more instructions to accomplish same task
- But each instruction runs much faster 

ISA - Instruction Set Architecture
- interface between hardware and software
- defines format for arithmetic/logic instructions, addressing instructions and branching instuctions 
	- Arithmetic instrunctions
	- Branching instructions: if block
	- Addressing instrunctions: read values from addresses
	
CPU has ALU surrounded by registers, connected to cache and memory
all MIPS instructions will happen in registers

MIPS design - 32 integer registers each holding 32 bits
	$zero: constant value 0
	$s0 - $s7: local variables
	$t0 - $t9: temporary registers
	and other registers for very specific purpose

Add instruction
- add <destination>, <source1>, <source2>
	- add immediate unsigned
	addiu $5, $29, 4 : $5=$29+4	
	#Values are treated as unsigned integers, not two's complement integers
	- add unsigned
	addu $6, $6, $2 : $6=$6+$2
	- add immediate
	addi $s0, $s1, -2 : s0=s1-2
	addi $t1, $zero, 6 : t1=6 #initialize register

Sub instrunction
- sub <destination>, <source1>, <source2>

problem1:
	g=15;
	h=20;
	i=5;
	j=18;
	f=(g+h)-(i+j);
	$s0=g ... $s4=f
answer:
	addi $s0, $zero, 15
	addi $s1, $zero, 20
	addi $s2, $zero, 5
	addi $s3, $zero, 18
	add $t0, $s0, $s1
	add $t1, $s2, $s3
	sub $s4, $t0, $t1

Branching instructions
- if the condition is true, the branching will happen, 
  otherwise the next instruction will be executed
- beq <register1>, <register2>, label1 
	- branch on equal: if register1 is equal to register2, then branch to label1
- bne <>, <>, label1
	- branch on not equal
- bgt <>, <>, label1
	- branch on greater than
- bge <>, <>, label1
	- branch on greater than or equal to
- blt <>, <>, label1
	- branch on less than
- ble <>, <>, label1
	- branch on less than or equal to
- j label1
	- unconditional jump to a label1

problem2:
	if((A>=B) || A>6)
		C=A;
	else
		C=B-A;
	$s0=C, $s1=A, $s2=B
answer:

	bge $s1, $s2, label1	#if A>=B
	addi $t0, $zero, 6	#$t0=6
	bgt $s1, $t0, label1	#if A>6
	sub $s0, $s2, $s1	#C=B-A
	j end			#jump to end

label1: add $s0, $zero, $s1	#C=A
end:    

problem3:
	sum=0;
	for(i=0; i<10; i++){
		sum+=i;
	}
answer:

main: 	
	addi $s1, $zero, 0	#sum=0
	addi $s0, $zero, 0	#i=0
	addi $t0, $zero, 10	#upper limit=5
FOR_LOOP:
    	bge $s0, $t0, END_FOR 	#if i >= 10, go to END_FOR
    	addi $s1, $s1, 1    	#sum+=1
    	addi $s0, $s0, 1       #i++
    	j FOR_LOOP             #Jump back to the top to for loop again
END_FOR:

problme4:
	sum=0;
	for (i=0; i<10; i++){
		j=i;
		while(j<2*i){
			sum=sum+j;
			j++;
		}
	}
	
answer:
	addi $s0, $zero, 0	#sum=0
	addi $s1, $zero, 0	#i=0
	addi $t0, $zero, 10	#upper limit=10
	addi $s2, $zero, 0	#j=0
	addi $t1, $zero, 2	#2
FOR_LOOP: 
	bge $s1, $t0, END_FOR	#if i>=10, go to END_FOR
	addi $s2, $s1, 0	#j=i
	mul $t2, $s1, $t1	#$t2=i*2
WHILE:	
	bge $s2, $t2, END_WHILE#if j>=i*2, go to END_WHILE
	add $s0, $s0, $s2	#sum=sum+j
	addi $s2, $s2, 1	#j++
	j WHILE		#jump back to the top of while loop again
END_WHILE:
	addi $s1, $s1, 1	#i++
	j FOR_LOOP		#jump back to the top of for loop again
END_FOR:

.data section
Z:	.word 12	#to declare 32bit word and set to 12
array: .space 256 	#to create a space of 256, can be 64 integers or 256 characters
			#== int array[64];
array:	.word 1,2,4,8,16,32,64	#==int array[] = {1,2,4,6,8,16,32,64}
msg:	.asciiz "Hello World!\n"
	
MIPS cannot directly manipulate data in memory


#load: copy data from memory to register
load word
lw <destination register>, memory_var
lw $s0, A 
#$4=Memory[$29+0] 


#store: copy data from register to meory
store word
sw <source register>, memory_var
sw $s0, C

problem1:
	declare memory variable A, B, initialized to 20 and 45
	declare C and initialize to 0. set C to sum of A+B
answer:
.globl main
.text
main:
	lw $s0, A		#get value of A from memory A to register $s0
	lw $s1, B		#get value of B from memory B to register $s1
	lw $s2, C		#get value of C from memory C to register $s1
	add $s2, $s0, $s1	#C=A+B
	sw $s2, C		#store value of $s2 in memory C
	li $v0, 10 		# Sets $v0 to "10" to select exit syscall
	syscall 		# Exit

.data
A:	.word 20
B:	.word 45
C:	.word 0

#shift left logical
sll $2,$4,2	
#$2=$4<<2	
#Shift left by constant number of bits

#access arrays
int array[20];
printf("array[0]: %u", array); == printf("array[0]: %u", &array[0]); 
intergers 4 bytes, doubles 4 or 8 bytes

pointer arithmetic 
printf("array[5]: %u", *(array+5));
adds 20 bytes to base address to access array[5] when array elements are integer(4 bytes)

base address: array
offset=index of element
offset in bytes= index * element size

C: base[offset]	MIPS: offset(<register storing base address>)
array[8]		32($s0)

lw <destination register>, <constant offset in bytes>
lw $s0, 20($s1) #load $s0 with a value stored at an offset of 20 bytes 
from the base address in $s1

sw <destination register>, <constant offset in bytes>
sw $s0, 20($s1) #store $s0 at an offset of 20bytes from base address in $s1

lb <destination register>, <constant offset in bytes>
lb $s0, 20($s1) #load an 8-bit value stored at 
sb

Problem 3:
array[12] = h + array[8]

$s2 = h
$s3 = base address
$t1 = temp

answer:
lw $t1, 32($s3) #$t1 = array[8]
add $t1, $s2, $t1 #$t1 = h+array[8]
sw $t1, 48($s3) #store $t1 at array[12]

Problem 4:
g = h + array[i]

$s1 = g
$s2 = h
$s3 = base address
$s4 = i

answer:
addi $t0, $zero, 4	#$t0 = 4
mul $t0, $s4, $t0	#$t0 = 4*i
add $t1, $s3, $t0	#$t1 = $s3 + 4*i 
			#store new base address in temp because you don't want to mess up 
			#the original base address
lw $t2, 0($t1)		#$t2 = *(array+i) = array[i]
add $s1, $t2, $s2 	#g = h+array[i]

#how do I get the address of an array declared in .data section?
la <destination register to store the address>, arrayname
la $s0, array
.data
array:	.word 1,2,4,8,16,32,64
array1: .space 256

Problem 5:
int array[7];
int main(){
	int i=0;
	array[0]=5;
	for(i=1; i<7; i++){
		array[i]+=array[i-1];	
	}
}
	
answer:

.text
.globl main
main:
	addi $s0, $zero, 0	#i=0
	la $s0, array		#load array to $s0
	addi $t0, $zero, 5	#5
	sw $t0, 0($s0)		#array[0]=5
	
	addi $t1, $zero, 7	#upper limit = 7
	addi $s1, $zero, 1	#i=1
FOR_LOOP: 
	bge $s1, $t1, END_FOR	#1 to if i>=7, go to END_FOR
	addi $s2, $zero, 4	#$s2 = 4 interger size
	
	#array[i]
	mul $t2, $s2, $s1	#$t2 = 4*i
	add $s3, $s0, $t2	#$s3 = (array+i) is base address+offset*4 also new base address
	lw $t3, 0($s3)		#$t3 =array[i]
	
	#array[i-1]
	addi $t4, $s1, -1 	#$t4 = i-1
	mul $t4, $s2, $t4	#$t4 = 4*(i-1)
	add $s4, $s0, $t4 	#$s4 = (array+i-1) 
	lw $t5, 0($s4)    	#$t5 = array[i-1]
	
	add $t6, $t3, $t5 	#$t6 = array[i]+array[i-1]
	
	sw $t6, 0($s3)		#array[i] = result
	addi $s1, $s1, 1 	#i++
	j FOR_LOOP

END_FOR:
	li $v0, 10
	syscall

.data
array:	.space 28
	.align 0

addi $t0, $zero, 0
addi $t1, $zero, 2
bge $t0, $t1, <label to addr 24>
addi $t0, $t0, 1
j <label to addr. 12>
li $v0, 10
syscall

label is a placeholder, if it's called it is replaced with t
he address of the line that you intended to go

how to call function in MIPS
1. place function arguments in standard location where function can find them
2. save current program locaion to return to later
3. jump to the function location
4. fuction runs using provided arguments
5. function produces output
6. jump to original location

can a function change local variables of its calling function? 
NO function operates in its own bubble

$a0-$a3: argumens to pass to function max 4
$v0-$v1 return a value to obtain from function max 2
$ra return address of function
$sp stack pointer (current top of stack)

Each function has to arrange for its own REGISTER spaceâ€¦
this happens in MIPS by taking a back up of currently used registers

jump and link: use this to call a function
	jal <destination>
$ra stores address of next instruction

jump register-use this to return from a function
	jr <reg1>
destination address is stored in <reg1>

overhead
1. program saves the context (registers) of calling function (caller)
2. program saves the arguments in registers $a0-$a3
3. program calls the callee via jal instruction
	jal <function label>
   jal saves the address of the next instruction in return address $ra
   program counter points to the callee's location. 
   callee saves return values in regs $v0-$v1
4. callee returns via jr instruction
	jr <register name> #usually $ra
   jr sets program counter to $ra. program counter continues there onwards

#function problem:

#include <stdio.h>

int function(int a);

int main(){
	int x=5;
	int y;
	
	y=function(x);
	
	printf("y=%i\n", y);
	
	return 0;

}

int function(int a) {
	return 3*a+5;
}

#answer:

.text
.globl main

#s0 = x
#s1 = y

main:
	#initialize registers
	lw $s0, x	#$s0 = x
	lw $s1, y	#$s1 = y
	
	#call function
	move $a0, $s0	#argument 1 = x
	jal function	#jump to function
	move $s1, $v0	#return value saved in $v0
	
	#print msg1
	li $v0, 4
	la $a0, msg1
	syscall
	
	#print result
	li $v0, 1
	move $a0, $s1
	syscall
	
	#print newline
	li $v0, 4
	la $a0, lf
	syscall
	
	#exit
	li $v0, 10
	syscall
	
function:
	li $s0, 3
	mul $s1, $s0, $a0	#$s1 = 3*$a0
	addi $s1, $s1, 5	#$s1 = 3*$a0+5
	
	#save the return value in $v0
	move $v0, $s1
	
	#return from function
	jr $ra

.data

x: .word 5
y: .word 0
msg1: .asciiz "y="
lf: .asciiz "\n"


#stack pointer sp grows 4 bytes
use stack to store $t0-$t9 or $a0-$a3
#stack problem:
using $sp, write the set of commands for pushing and popping the register $s0
push
1. increment $sp by 4
2. store the register using $sp as the base address
pop
1. load the register using $sp as the base address
2. decrement the stack pointer

#answer:
addi $sp, $sp, -4	#increment $sp by 4
sw $s0, 0($sp)		#save $s0
			#call function
			#function returns
lw $s0, 0($s0)		#restore $s0
addi $sp, $sp, 4	#decrement $sp by 4


callee responsibilities
1. push caller's $s registers onto the stack, so that it does not overwrite the caller's data
2. push $ra onto the stack because a callee may call another function, overwriting return address
3. do function stuff
4. pop $ra from the stack
5. pop $s registers from the stack

char string[256];
  int i=0;
  char *result = NULL;  // NULL pointer is binary zero
  
  // Obtain string from user, e.g. "Constantinople"
  scanf("%255s", string); 
  
  // Search string for letter 'e'.
  // Result is pointer to first e (if it exists)
  // or NULL pointer if it does not exist
  while(string[i] != '\0') {
    if(string[i] == 'e') {
      result = &string[i]; 
      break; // exit from while loop early
    }
    i++;
  }

  if(result != NULL) {
    printf("First match at address %d\n", result);
    printf("The matching character is %c\n", *result);
  }
  else
    printf("No match found\n");









